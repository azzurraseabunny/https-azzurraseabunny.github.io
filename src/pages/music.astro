---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';


// Define the tracks with their titles, audio sources, and cover images
const tracks = [
  {
    title: "Study Time",
    src: "/audio/music/StudyTim.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Starstruck",
    src: "/audio/music/starstruck.mp3", // Replace with your actual audio file path
    cover: "/audio/music/disc.png", // Optional, if you want to show an image for the track
  },
  {
    title: "Halcyon",
    src: "/audio/music/Halcyon.ogg",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Scav",
    src: "/audio/music/Scav.ogg",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Daybreak",
    src: "/audio/music/Daybreak.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Cat-Coded",
    src: "/audio/music/catcoded.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Prideful Prance",
    src: "/audio/music/Polyphoria.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Azure",
    src: "/audio/music/Azure.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: ":3-ified",
    src: "/audio/music/uwuified.mp3",
    cover: "/audio/music/disc.png",
  },
  {
    title: "Avert",
    src: "/audio/music/Avert.ogg",
    cover: "/audio/music/disc.png",
  },
  
  // Add more tracks here as needed
];
---

<body>
		<Header />
		<main>
			<article>

<!-- Audio Player Section -->
<div class="audio-player">
  {tracks.map((track, index) => (
    <div class="track-item" key={index} onClick="selectTrack(${index})">
      <div class="track-info">
        <img class="track-cover" src={track.cover} alt="Track Cover" />
        <h2 class="track-title">{track.title}</h2><br>
      </div>
      <audio class="audio-element" src={track.src} preload="metadata"></audio>
      <div class="controls">
        <button class="playPauseBtn">Play</button>
        <div class="progress-bar">
          <input class="progress" type="range" min="0" value="0" step="1" />
          <span class="current-time">0:00</span> / <span class="duration">0:00</span>
        </div>
      </div>
    </div>
  ))}
</div>

<!-- Album Display Box -->
<div class="album-display">
  <img id="album-cover" src="" alt="Album Cover" class="album-cover"/>
  <h2 id="album-title" class="album-title">still a wip!</h2>
</div>

</article>
		</main>
		<Footer />
	</body>

<style>
  .audio-player {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #222;
  padding: 20px;
  border-radius: 10px;
  color: white;
  font-family: Arial, sans-serif;
  max-width: 800px;
}

.album-display {
  position: fixed;
  top: 100px;
  right: 20px;
  background-color: #333;
  padding: 20px;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 300px;
  text-align: center;
}

.album-cover {
  width: 100%;
  max-width: 200px;
  height: auto;
  border-radius: 10px;
}

.album-title {
  margin-top: 10px;
  color: white;
  font-size: 1.2rem;
}


  .track-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #333;
    border-radius: 10px;
    margin: 10px 0;
    padding: 10px 20px;
    width: 100%;
    box-sizing: border-box;
  }

  .track-info {
    display: flex;
    align-items: center;
    flex: 1;
  }

  .track-cover {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 5px;
    margin-right: 20px;
  }

  .track-title {
    color: white;
    font-size: 1.2rem;
  }

  .controls {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-shrink: 0;
  }

  .progress-bar {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 100%;
}

.progress-bar input[type="range"] {
  flex-grow: 1;
  appearance: none;
  background: #555;
  height: 5px;
  border-radius: 5px;
  outline: none;
  cursor: pointer;
}

.progress-bar input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 10px;
  height: 10px;
  background: #1db954;
  border-radius: 50%;
  cursor: pointer;
}

.current-time,
.duration {
  font-size: 0.9rem;
  color: white;
}

  .playPauseBtn {
    background-color: #1db954;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 0.9rem;
    border-radius: 5px;
  }

  .playPauseBtn:hover {
    background-color: #1ed760;
  }

  .global-volume-control {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #333;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    z-index: 1000;
  }

  .global-volume-control label {
    margin-bottom: 10px;
    color: white;
    font-size: 0.9rem;
    text-transform: uppercase;
  }

  .global-volume-control input[type="range"] {
    writing-mode: bt-lr; /* Ensures vertical orientation */
    -webkit-appearance: slider-vertical;
    width: 8px;
    height: 150px;
    background: #222;
    border-radius: 5px;
    outline: none;
    margin: 0;
  }

  .global-volume-control input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    background: #1db954;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    cursor: pointer;
  }

  .global-volume-control input[type="range"]::-moz-range-thumb {
    background: #1db954;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    cursor: pointer;
  }
</style>

<script client:load>
// Get all play/pause buttons and audio elements
const playPauseBtns = document.querySelectorAll('.playPauseBtn');
const audioElements = document.querySelectorAll('.audio-element');

// Function to format time in MM:SS
function formatTime(time) {
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return `${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
}

// Function to pause all tracks except the selected one
function pauseAllTracks(exceptIndex) {
  audioElements.forEach((audio, index) => {
    if (index !== exceptIndex) {
      audio.pause();
      playPauseBtns[index].textContent = 'Play';
    }
  });
}

// Function to handle play/pause and update album display
function selectTrack(index) {
  const track = tracks[index];
  const albumCover = document.getElementById('album-cover');
  const albumTitle = document.getElementById('album-title');
  const audio = audioElements[index];
  const playPauseBtn = playPauseBtns[index];

  // Update album display
  albumCover.src = track.cover;
  albumTitle.textContent = track.title;

  // Pause all other tracks and play the selected one
  pauseAllTracks(index);

  if (audio.paused) {
    audio.play();
    playPauseBtn.textContent = 'Pause';
  } else {
    audio.pause();
    playPauseBtn.textContent = 'Play';
  }
}

// Event listener for play/pause buttons
playPauseBtns.forEach((btn, index) => {
  btn.addEventListener('click', () => {
    const audio = audioElements[index];
    const playPauseBtn = playPauseBtns[index];
    if (audio.paused) {
      pauseAllTracks(index);
      audio.play();
      playPauseBtn.textContent = 'Pause';
    } else {
      audio.pause();
      playPauseBtn.textContent = 'Play';
    }
  });
});

// Function to update progress bar
audioElements.forEach((audio, index) => {
  const progressBar = document.querySelectorAll('.progress')[index];
  const currentTimeDisplay = document.querySelectorAll('.current-time')[index];
  const durationDisplay = document.querySelectorAll('.duration')[index];

  audio.addEventListener('timeupdate', () => {
    const currentTime = audio.currentTime;
    const duration = audio.duration;
    progressBar.value = currentTime;
    currentTimeDisplay.textContent = formatTime(currentTime);
    durationDisplay.textContent = formatTime(duration);
  });

  progressBar.addEventListener('input', () => {
    audio.currentTime = progressBar.value;
  });

  audio.addEventListener('loadedmetadata', () => {
    durationDisplay.textContent = formatTime(audio.duration);
    progressBar.max = audio.duration;
  });

  audio.addEventListener('ended', () => {
    playPauseBtn.textContent = 'Play';
  });
});

</script>

</Layout>
