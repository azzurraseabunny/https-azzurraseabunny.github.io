---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';


// Define the tracks with their titles, audio sources, and cover images
const tracks = [
  {
    title: "Study Time",
    src: "/audio/music/StudyTim.mp3",
    cover: "/audio/music/disc.png",
    artist: "Funkiin Arts",
	date: "2023",
	genre: "Electronic Lo-fi",
	stripes: ["#e44030", "#d4342c", "#e44030", "#d4342c", "#e44030"]
  },
  {
    title: "Azure",
    src: "/audio/music/Azure.mp3",
    cover: "/audio/music/disc.png",
	artist: "Funkiin Arts",
	date: "2023",
	genre: "Kawaii Pop",
	stripes: ["#e44030", "#d4342c", "#e44030", "#d4342c", "#e44030"]
  },
  {
    title: ":3-ified",
    src: "/audio/music/uwuified.mp3",
    cover: "/audio/music/disc.png",
	artist: "Funkiin Arts",
	date: "2023",
	genre: "Playful EDM",
	stripes: ["#e44030", "#d4342c", "#e44030", "#d4342c", "#e44030"]
  },
    {
    title: "Prideful Prance",
    src: "/audio/music/Polyphoria.mp3",
    cover: "/audio/music/disc.png",
	artist: "Funkiin Arts",
	date: "2023",
	genre: "Playful EDM",
	stripes: ["#f25d38", "#fa7452", "#ffffff", "#fc81ba", "#ff4fa1"]
  },
  {
    title: "Silly Date",
    src: "/audio/music/chipdate.mp3",
    cover: "/audio/music/disc.png",
    artist: "Honeymoon Repollenated",
	date: "2024",
	genre: "Electronic Comedy",
	stripes: ["#f58442", "#f56942", "#f58442", "#f56942", "#f58442"]
  },
  {
    title: "Flower Basket",
    src: "/audio/music/flowerbasket.mp3",
    cover: "/audio/music/disc.png",
    artist: "Honeymoon Repollenated",
	date: "2023",
	genre: "Playful EDM",
	stripes: ["#f58442", "#f56942", "#f58442", "#f56942", "#f58442"]
  },
  {
    title: "Starstruck",
    src: "/audio/music/starstruck.mp3",
    cover: "/audio/music/disc.png",
    artist: "Honeymoon Repollenated",
	date: "2024",
	genre: "Electronic Lofi",
	stripes: ["#f58442", "#f56942", "#f58442", "#f56942", "#f58442"]
  },
  {
    title: "Shorts and Shores",
    src: "/audio/music/shortsandshores.mp3",
    cover: "/audio/music/disc.png",
    artist: "Honeymoon Repollenated",
	date: "2024",
	genre: "Electronic Rave",
	stripes: ["#f58442", "#f56942", "#f58442", "#f56942", "#f58442"]
  },
  {
    title: "Daybreak",
    src: "/audio/music/Daybreak.mp3",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon (Original Mix)",
	date: "2022",
	genre: "Calm Electronic Music",
	stripes: ["#1b9470", "#19a672", "#1b9470", "#19a672", "#1b9470"]
  },
  {
    title: "Unholy Serenata",
    src: "/audio/music/unholyseranata.ogg",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon Repollenated",
	date: "2024",
	genre: "Orchestral EDM",
	stripes: ["#206161", "#237070", "#206161", "#237070", "#206161"]
  },
  {
    title: "Unholy Deity",
    src: "/audio/music/UnholyDeity.mp3",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon Repollenated",
	date: "2023",
	genre: "Aggressive Darkwave",
	stripes: ["#260c17", "#30101a", "#38111c", "#45141f", "#521720"]
  },
  {
    title: "Bittersweet",
    src: "/audio/music/Bittersweet.mp3",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon (Original Mix)",
	date: "2021",
	genre: "Dreamy Indie House",
	stripes: ["#fce8ff", "#f9cfff", "#fce8ff", "#f9cfff", "#fce8ff"]
  },
  {
    title: "Cat-Coded",
    src: "/audio/music/catcoded.mp3",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon (Original Mix)",
	date: "2022",
	genre: "Playful EDM",
	stripes: ["#fc4ef1", "#d930ff", "#fc4ef1", "#d930ff", "#fc4ef1"]
  },
  {
    title: "Avert",
    src: "/audio/music/Avert.ogg",
    cover: "/audio/music/disc.png",
	artist: "Honeymoon Repollenated",
	date: "2023",
	genre: "Experimental",
	stripes: ["#521720", "#45141f", "#38111c", "#30101a", "#260c17"]
  },
  {
    title: "Halcyon",
    src: "/audio/music/Halcyon.ogg",
    cover: "/audio/music/disc.png",
    artist: "Iterator Funkin",
	date: "2024",
	genre: "Orchestral EDM",
	stripes: ["#f75414", "#f76714", "#f77614", "#f78214", "#f79514"]
  },
  {
    title: "Scav",
    src: "/audio/music/Scav.ogg",
    cover: "/audio/music/disc.png",
	artist: "Iterator Funkin",
	date: "2024",
	genre: "Electronic Tribal Music",
	stripes: ["#261c20", "#291f21", "#261c20", "#291f21", "#261c20"]
  },
  {
    title: "Descend",
    src: "/audio/music/Descend.mp3",
    cover: "/audio/music/disc.png",
	artist: "Iterator Funkin",
	date: "2024",
	genre: "Experimental",
	stripes: ["#141313", "#382812", "#5f4524", "#896333", "#dfc06f"]
  },
  {
    title: "Journey to the West (LMK)",
    src: "/audio/music/wukong.mp3",
    cover: "/audio/music/disc.png",
	artist: "Zurra's Oneshots",
	date: "2023",
	genre: "Chinese EDM",
	stripes: ["#faa91a","#faa91a", "#a7151f", "#a7151f", "#faa91a", "#faa91a"]
  },
  
  // Add more tracks here as needed
];
---

<body>
		<Header />
		<main>
			<article>

<div class="audio-player">
  {tracks.map((track, index) => (
    <div class="track-item" key={index} onClick="selectTrack(${index})">
  <div class="stripes">
    {track.stripes.map((color, stripeIndex) => (
      <div class="stripe" style={{ backgroundColor: color }} key={stripeIndex}></div>
    ))}
  </div>
  <div class="track-info">
    <div>
      <h2 class="track-title">{track.title}</h2>
      <p class="track-artist">{track.artist} // {track.date} // {track.genre}</p>
    </div>
  </div>
  <audio class="audio-element" src={track.src} preload="metadata"></audio>
  <div class="controls">
    <button class="playPauseBtn">Play</button>
    <div class="progress-bar">
      <input class="progress" type="range" min="0" value="0" step="1" />
      <span class="current-time">0:00</span> / <span class="duration">0:00</span>
    </div>
  </div>
</div>

  ))}
</div>



<!-- Add a global volume slider -->
<div class="global-volume-control">
  <label for="global-volume-slider">Volume</label>
  <input id="global-volume-slider" class="volume-slider" type="range" min="0" max="100" step="0.01" value="100" />
</div>


</article>
		</main>
		<Footer />
	</body>

<style>

..global-volume-control {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 20px;
  background: #333;
  padding: 10px;
  border-radius: 5px;
  color: white;
}

.volume-slider {
  appearance: none;
  width: 150px;
  height: 5px;
  background: #555;
  border-radius: 5px;
  outline: none;
  cursor: pointer;
}

.volume-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 10px;
  height: 10px;
  background: #1db954;
  border-radius: 50%;
  cursor: pointer;
}

.volume-slider::-moz-range-thumb {
  width: 10px;
  height: 10px;
  background: #1db954;
  border-radius: 50%;
  cursor: pointer;
}

  .audio-player {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #222;
  padding: 20px;
  border-radius: 10px;
  color: white;
  font-family: Arial, sans-serif;
  max-width: 800px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

.album-cover {
  width: 100%;
  max-width: 200px;
  height: auto;
  border-radius: 10px;
}

.album-title {
  margin-top: 10px;
  color: white;
  font-size: 1.2rem;
}

.track-artist {
  margin-top: 5px;
  color: #aaa;
  font-size: 0.9rem;
}

.track-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #333;
  border-radius: 10px;
  margin: 10px 0;
  padding: 10px 20px;
  width: 100%;
  box-sizing: border-box;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  position: relative;
}

.stripes {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  width: 5%;   /* Cover 5% of the width of the track-item */
  display: flex;  /* Arrange stripes in a row */
  justify-content: space-between;  /* Distribute stripes evenly */
}

.stripe {
  height: 100%;   /* Each stripe takes full height of the container */
  width: 20%;     /* Each stripe takes 1/5th of the 5% container width */
}


  .track-info {
  display: flex;
  align-items: center;
  flex: 1;
  margin-left: 5%;  /* Shift the content to the right by 20% */
}

.track-title {
  color: white;
  font-size: 1.2rem;
}

.track-artist {
  color: #aaa;
  font-size: 0.9rem;
}


  .controls {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-shrink: 0;
  }

  .progress-bar {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 100%;
}

.progress-bar input[type="range"] {
  flex-grow: 1;
  appearance: none;
  background: #555;
  height: 5px;
  border-radius: 5px;
  outline: none;
  cursor: pointer;
}

.progress-bar input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 10px;
  height: 10px;
  background: #1db954;
  border-radius: 50%;
  cursor: pointer;
}

.current-time,
.duration {
  font-size: 0.9rem;
  color: white;
}

.playPauseBtn {
  background-color: #1db954;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
  font-size: 0.9rem;
  border-radius: 5px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  transition: box-shadow 0.2s ease, transform 0.1s ease;
}

.playPauseBtn:active {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0); /* Faded shadow when pressed */
  transform: scale(0.98); /* Slightly shrink the button when pressed */
}




  .global-volume-control {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #333;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    z-index: 1000;
  }

  .global-volume-control label {
    margin-bottom: 10px;
    color: white;
    font-size: 0.9rem;
    text-transform: uppercase;
  }

  .global-volume-control input[type="range"] {
    writing-mode: bt-lr; /* Ensures vertical orientation */
    -webkit-appearance: slider-vertical;
    width: 8px;
    height: 150px;
    background: #222;
    border-radius: 5px;
    outline: none;
    margin: 0;
  }

  .global-volume-control input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    background: #1db954;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    cursor: pointer;
  }

  .global-volume-control input[type="range"]::-moz-range-thumb {
    background: #1db954;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    cursor: pointer;
  }
</style>

<script client:load>
  // Get all play/pause buttons and audio elements
  const playPauseBtns = document.querySelectorAll('.playPauseBtn');
  const audioElements = document.querySelectorAll('.audio-element');

  // Get the global volume slider
  const globalVolumeSlider = document.getElementById('global-volume-slider');

  // Set initial global volume to 1 (100%)
  audioElements.forEach(audio => {
    audio.volume = globalVolumeSlider.value / 100; // Correctly scale to 0-1
  });

  // Event listener for the global volume slider
  globalVolumeSlider.addEventListener('input', (event) => {
    const globalVolume = event.target.value; // Get global volume value (0-100)
    audioElements.forEach(audio => {
      audio.volume = globalVolume / 100; // Scale value to 0-1 for volume
    });
  });

  // Initialize individual volume sliders for each track (if you still want separate control)
  const volumeSliders = document.querySelectorAll('.volume-slider');
  volumeSliders.forEach((slider, index) => {
    slider.addEventListener('input', (event) => {
      const volume = event.target.value / 100; // Convert slider value (0-100) to 0-1 scale
      audioElements[index].volume = volume; // Set the volume for the corresponding track
    });
  });

  // Function to format time in MM:SS
  function formatTime(time) {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
  }

  // Function to pause all tracks except the selected one
  function pauseAllTracks(exceptIndex) {
    audioElements.forEach((audio, index) => {
      if (index !== exceptIndex) {
        audio.pause();
        playPauseBtns[index].textContent = 'Play';
      }
    });
  }

  // Function to handle play/pause and update album display
  function selectTrack(index) {
    const track = tracks[index];
    const albumCover = document.getElementById('album-cover');
    const albumTitle = document.getElementById('album-title');
    const audio = audioElements[index];
    const playPauseBtn = playPauseBtns[index];

    // Update the album display with the selected track's cover and title
    albumCover.src = track.cover;
    albumTitle.textContent = track.title; // Update album-title dynamically

    // Pause all other tracks and play the selected one
    pauseAllTracks(index);

    if (audio.paused) {
      audio.play();
      playPauseBtn.textContent = 'Pause';
    } else {
      audio.pause();
      playPauseBtn.textContent = 'Play';
    }
  }

  // Event listener for play/pause buttons
  playPauseBtns.forEach((btn, index) => {
    btn.addEventListener('click', () => {
      const audio = audioElements[index];
      const playPauseBtn = playPauseBtns[index];
      const albumCover = document.getElementById('album-cover');
      const albumTitle = document.getElementById('album-title');
      
      if (audio.paused) {
        pauseAllTracks(index);
        audio.play();
        playPauseBtn.textContent = 'Pause';
      } else {
        audio.pause();
        playPauseBtn.textContent = 'Play';
      }
    });
  });

  // Function to update progress bar
  audioElements.forEach((audio, index) => {
    const progressBar = document.querySelectorAll('.progress')[index];
    const currentTimeDisplay = document.querySelectorAll('.current-time')[index];
    const durationDisplay = document.querySelectorAll('.duration')[index];

    audio.addEventListener('timeupdate', () => {
      const currentTime = audio.currentTime;
      const duration = audio.duration;
      progressBar.value = currentTime;
      currentTimeDisplay.textContent = formatTime(currentTime);
      durationDisplay.textContent = formatTime(duration);
    });

    progressBar.addEventListener('input', () => {
      audio.currentTime = progressBar.value;
    });

    audio.addEventListener('loadedmetadata', () => {
      durationDisplay.textContent = formatTime(audio.duration);
      progressBar.max = audio.duration;
    });

    audio.addEventListener('ended', () => {
      playPauseBtn.textContent = 'Play';
    });
  });
</script>
</Layout>
